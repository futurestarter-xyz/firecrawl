name: firecrawl

x-common-service: &common-service
  build: apps/api
  networks:
    - backend
  extra_hosts:
    - "host.docker.internal:host-gateway"

services:
  playwright-service:
    build: apps/playwright-service
    environment:
      - PORT=3000
      - PROXY_SERVER=${PROXY_SERVER}
      - PROXY_USERNAME=${PROXY_USERNAME}
      - PROXY_PASSWORD=${PROXY_PASSWORD}
      - BLOCK_MEDIA=${BLOCK_MEDIA}
      - MAX_TIMEOUT=120000
      - REQUEST_TIMEOUT=120000
    networks:
      - backend
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "3000"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    ports:
      - "3000:3000"

  api:
    <<: *common-service
    environment:
      REDIS_URL: redis://redis:6379
      REDIS_RATE_LIMIT_URL: redis://redis:6379
      PLAYWRIGHT_MICROSERVICE_URL: http://playwright-service:3000/scrape
      USE_DB_AUTHENTICATION: "false"
      PORT: ${PORT:-3002}
      NUM_WORKERS_PER_QUEUE: ${NUM_WORKERS_PER_QUEUE:-8}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      OPENAI_BASE_URL: ${OPENAI_BASE_URL}
      MODEL_PROVIDER: "openai"
      MODEL_NAME: "gpt-4"
      MODEL: "gpt-4"
      LLM_MODEL: "gpt-4"
      USE_OPENAI: "true"
      HOST: "0.0.0.0"
      LOGGING_LEVEL: "debug"
      FLY_PROCESS_GROUP: app
      NODE_ENV: "production"
      BULL_BOARD_BASE_URL: "/admin"
      BULL_BOARD_USERNAME: "admin"
      BULL_BOARD_PASSWORD: "admin"
      BULL_QUEUE_UI_PATH: "/admin/queues"
      BULL_QUEUE_UI_PORT: "3002"
      BULL_PREFIX: "bull"
      BULL_UI_ENABLED: "true"
      BULL_UI_PATH: "/admin/queues"
      REQUEST_TIMEOUT: 120000
      MAX_TIMEOUT: 120000
      SCRAPE_TIMEOUT: 120000
      JOB_TIMEOUT: 300000
      BULL_JOB_TIMEOUT: 300000
      QUEUE_NAME: "web-scraper"
      QUEUE_CONCURRENCY: 1
    depends_on:
      redis:
        condition: service_healthy
      playwright-service:
        condition: service_started
    ports:
      - "3002:3002"
    command: ["pnpm", "run", "start:production"]
    restart: unless-stopped

  worker:
    <<: *common-service
    environment:
      REDIS_URL: redis://redis:6379
      REDIS_RATE_LIMIT_URL: redis://redis:6379
      PLAYWRIGHT_MICROSERVICE_URL: http://playwright-service:3000/scrape
      USE_DB_AUTHENTICATION: "false"
      PORT: ${PORT:-3002}
      NUM_WORKERS_PER_QUEUE: ${NUM_WORKERS_PER_QUEUE:-8}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      OPENAI_BASE_URL: ${OPENAI_BASE_URL}
      MODEL_PROVIDER: "openai"
      MODEL_NAME: "gpt-4"
      MODEL: "gpt-4"
      LLM_MODEL: "gpt-4"
      USE_OPENAI: "true"
      HOST: "0.0.0.0"
      LOGGING_LEVEL: "debug"
      FLY_PROCESS_GROUP: worker
      NODE_ENV: "production"
      REQUEST_TIMEOUT: 120000
      MAX_TIMEOUT: 120000
      SCRAPE_TIMEOUT: 120000
      JOB_TIMEOUT: 300000
      BULL_JOB_TIMEOUT: 300000
      QUEUE_NAME: "web-scraper"
      QUEUE_CONCURRENCY: 1
      WORKER_ID: "worker-1"
      WORKER_CONCURRENT_JOBS: 1
    depends_on:
      redis:
        condition: service_healthy
      playwright-service:
        condition: service_started
    command: ["pnpm", "run", "workers"]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "pgrep", "-f", "workers"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  bull-board:
    image: deadly0/bull-board
    environment:
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ""
      REDIS_URL: "redis://redis:6379"
      BULL_PREFIX: "bull"
      PORT: 3000
      BASE_PATH: ""
    ports:
      - "3003:3000"
    networks:
      - backend
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3000"]
      interval: 10s
      timeout: 5s
      retries: 3

  redis:
    image: redis:alpine
    networks:
      - backend
    command: >
      redis-server 
      --appendonly yes 
      --bind 0.0.0.0
      --maxmemory 512mb
      --maxmemory-policy noeviction
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    restart: unless-stopped

networks:
  backend:
    driver: bridge

volumes:
  redis_data:
    driver: local
