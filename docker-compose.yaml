name: firecrawl

x-common-service: &common-service
  build: apps/api
  networks:
    - backend

services:
  playwright-service:
    build: apps/playwright-service
    environment:
      - PORT=3000
      - MAX_TIMEOUT=300000
      - REQUEST_TIMEOUT=300000
    networks:
      - backend
    restart: unless-stopped
    ports:
      - "3000:3000"

  api:
    <<: *common-service
    environment:
      REDIS_URL: redis://redis:6379
      REDIS_RATE_LIMIT_URL: redis://redis:6379
      PLAYWRIGHT_MICROSERVICE_URL: http://playwright-service:3000/scrape
      USE_DB_AUTHENTICATION: "false"
      PORT: ${PORT:-3002}
      NUM_WORKERS_PER_QUEUE: ${NUM_WORKERS_PER_QUEUE:-8}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      MODEL_PROVIDER: "anthropic"
      MODEL_NAME: "claude-2.1"
      MODEL: "claude-2.1"
      LLM_MODEL: "claude-2.1"
      ANTHROPIC_MODEL: "claude-2.1"
      USE_OPENAI: "false"
      HOST: "0.0.0.0"
      LOGGING_LEVEL: "debug"
      NODE_ENV: "production"
      REQUEST_TIMEOUT: 300000
      MAX_TIMEOUT: 300000
    depends_on:
      - redis
      - playwright-service
    ports:
      - "3002:3002"
    restart: unless-stopped

  worker:
    <<: *common-service
    environment:
      REDIS_URL: redis://redis:6379
      REDIS_RATE_LIMIT_URL: redis://redis:6379
      PLAYWRIGHT_MICROSERVICE_URL: http://playwright-service:3000/scrape
      USE_DB_AUTHENTICATION: "false"
      PORT: ${PORT:-3002}
      NUM_WORKERS_PER_QUEUE: ${NUM_WORKERS_PER_QUEUE:-8}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      MODEL_PROVIDER: "anthropic"
      MODEL_NAME: "claude-2.1"
      MODEL: "claude-2.1"
      LLM_MODEL: "claude-2.1"
      ANTHROPIC_MODEL: "claude-2.1"
      USE_OPENAI: "false"
      HOST: "0.0.0.0"
      LOGGING_LEVEL: "debug"
      NODE_ENV: "production"
      REQUEST_TIMEOUT: 300000
      MAX_TIMEOUT: 300000
    depends_on:
      - redis
      - playwright-service
    restart: unless-stopped

  redis:
    image: redis:alpine
    networks:
      - backend
    command: redis-server --appendonly yes --bind 0.0.0.0
    volumes:
      - redis_data:/data
    restart: unless-stopped

networks:
  backend:
    driver: bridge

volumes:
  redis_data:
    driver: local
